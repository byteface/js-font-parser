/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a> */package org.libspark.font.table{	import flash.utils.ByteArray;		public class Lookup {		    // LookupFlag bit enumeration	    public static var IGNORE_BASE_GLYPHS:int= 0x0002;	    public static var IGNORE_BASE_LIGATURES:int= 0x0004;	    public static var IGNORE_BASE_MARKS:int= 0x0008;	    public static var MARK_ATTACHMENT_TYPE:int= 0xFF00;		    private var type:int;	    private var flag:int;	    private var subTableCount:int;	    private var subTableOffsets:Array;	    private var subTables:Array;		    /** Creates new Lookup */	    public function Lookup(factory:LookupSubtableFactory, byte_ar:ByteArray, offset:int)		{	        byte_ar.position = offset;	        type = byte_ar.readUnsignedShort();	        flag = byte_ar.readUnsignedShort();	        subTableCount = byte_ar.readUnsignedShort();	        subTableOffsets = new int[subTableCount];	        subTables = new LookupSubtable[subTableCount];	        for (var i:int= 0; i < subTableCount; i++) {	            subTableOffsets[i] = byte_ar.readUnsignedShort();	        }	        for (var j:int= 0; j < subTableCount; j++) {	            subTables[j] = factory.read(type, byte_ar, offset + subTableOffsets[j]);	        }	    }		    public function getType():int{	        return type;	    }		    public function getSubtableCount():int{	        return subTableCount;	    }		    public function getSubtable(i:int):LookupSubtable{	        return subTables[i];	    }		}}