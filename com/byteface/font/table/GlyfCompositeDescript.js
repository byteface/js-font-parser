/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.      Glyph description for composite glyphs.  Composite glyphs are made up of one   or more simple glyphs, usually with some sort of transformation applied to each.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>   ported to javascript <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>*/GlyfCompositeDescript = Class.extend({    instructions:null,    onCurve:0x01,    xShortVector:0x02,    yShortVector:0x04,    repeat:0x08,    xDual:0x10,    yDual:0x20,	parentTable:null,	numberOfContours:0,	xMin:0,	yMin:0,	xMax:0,	yMax:0,    components:[],    beingResolved:false,    resolved:false,	init: function(parentTable, bais){    this.parentTable = parentTable;    this.numberOfContours = -1;    this.xMin = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );    this.yMin = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );    this.xMax = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );    this.yMax = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );            var comp    do{        comp = new GlyfCompositeComp(bais);        this.components.push(comp);    } while ((comp.flags & GlyfCompositeComp.MORE_COMPONENTS) != 0);    // Are there hinting intructions to read?    if ((comp.flags & GlyfCompositeComp.WE_HAVE_INSTRUCTIONS) != 0) {        this.readInstructions( bais, (bais.readUnsignedByte()<<8| bais.readUnsignedByte()));    }}, readInstructions: function( byte_ar, count){    this.instructions = [];    for(var i=0; i < count; i++){        this.instructions.push( ( byte_ar.readUnsignedByte() ) );    }}, resolve: function(){    if(this.resolved) return;    if (this.beingResolved) {        //alert("Circular reference in GlyfCompositeDesc");        return;    }    this.beingResolved = true;    var firstIndex = 0;    var firstContour = 0;    for(var i=0;i<this.components.length;i++)    {        var comp = this.components[i];        comp.firstIndex = firstIndex;        comp.firstContour = firstContour;                var desc        desc = this.parentTable.getDescription(comp.glyphIndex);        if (desc != null){            desc.resolve();            firstIndex += desc.count;            firstContour += desc.numberOfContours;        }			    }    this.resolved = true;    this.beingResolved = false;}, getEndPtOfContours: function(i){    var c = getCompositeCompEndPt(i);    if (c != null) {        var gd = this.parentTable.getDescription(c.getGlyphIndex());        return gd.getEndPtOfContours(i - c.getFirstContour()) + c.getFirstIndex();    }    return 0;}, getFlags: function(i){    var c = getCompositeComp(i);    if (c != null) {        var gd = this.parentTable.getDescription(c.getGlyphIndex());        return gd.getFlags(i - c.getFirstIndex());    }    return 0;}, getXCoordinate: function(i){    var c = getCompositeComp(i);    if (c != null){        var gd = this.parentTable.getDescription(c.getGlyphIndex());        var n = i - c.getFirstIndex();        var x = gd.getXCoordinate(n);        var y = gd.getYCoordinate(n);        var x1 = (c.scaleX(x, y));        x1 += c.getXTranslate();        return x1;    }    return 0;}, getYCoordinate: function(i){    var c = getCompositeComp(i);    if (c != null) {        var gd = this.parentTable.getDescription(c.getGlyphIndex());        var n = i - c.getFirstIndex();        var x = gd.getXCoordinate(n);        var y = gd.getYCoordinate(n);        var y1 = (c.scaleY(x, y));        y1 += c.getYTranslate();        return y1;    }    return 0;}, isComposite: function(){    return true;}, getPointCount: function (){    if (!this.resolved)        alert("getPointCount called on unresolved GlyfCompositeDescript");    var c = GlyfCompositeComp(this.components[this.components.length-1]);    return c.getFirstIndex() + this.parentTable.getDescription(c.getGlyphIndex()).getPointCount();}, getContourCount: function(){    if(!this.resolved)        alert("getContourCount called on unresolved GlyfCompositeDescript");    var c = GlyfCompositeComp(this.components[this.components.length-1]);    return c.getFirstContour() + this.parentTable.getDescription(c.getGlyphIndex()).getContourCount();}, getComponentIndex: function(i){    return this.components[i].getFirstIndex();}, getComponentCount: function(){    return this.components.length();}, getCompositeComp: function(i){    var c    for (var n=0; n < this.components.length; n++) {        c = components[n];        var gd = this.parentTable.getDescription(c.getGlyphIndex());        if (c.getFirstIndex() <= i && i < (c.getFirstIndex() + gd.getPointCount())) {            return c;        }    }    return null;}, getCompositeCompEndPt: function(i){    var c;    for(var j= 0; j < this.components.length; j++)    {        c = this.components[j];        var gd = this.parentTable.getDescription(c.getGlyphIndex());        if (c.getFirstContour() <= i && i < (c.getFirstContour() + gd.getContourCount())){            return c;        }    }    return null;}});