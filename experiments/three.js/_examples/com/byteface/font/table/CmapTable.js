/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>   ported to javascript <a href="mailto:byteface@googlemail.com">Michael Lawrence</a> */CmapTable = Class.extend({    version:0,    numTables:0,    entries:null,    formats:null,init: function(de, byte_ar){	    byte_ar.pos = de.offset;        var fp = byte_ar.pos;    this.version = byte_ar.readUnsignedShort();    this.numTables = byte_ar.readUnsignedShort();    // Get each of the index entries    this.entries = [];    for (var i=0; i < this.numTables; i++) {        this.entries.push( new CmapIndexEntry(byte_ar) );    }        // Get each of the tables    this.formats = [];    for (var j=0; j < this.numTables; j++) {        byte_ar.pos = fp + this.entries[j].offset;        var format = byte_ar.readUnsignedShort();                var cmf = new CmapFormat(byte_ar);        var value = cmf.create(format, byte_ar);                this.formats.push( value );    }}, getCmapFormat: function( platformId, encodingId ){    // Find the requested format    for (var i= 0; i < this.numTables; i++) {        if ( this.entries[i].platformId == platformId && this.entries[i].encodingId == encodingId ) {            return this.formats[i];        }    }    return null;}			, getType: function(){    return Table.cmap;}		});						/*		TODO			    public function toString():String{	        var sb:StringBuffer= new StringBuffer( numTables * 8).append("cmap\n");		        // Get each of the index entries	        for (var i:int= 0; i < numTables; i++) {	            sb.append( '\t' ).append(entries[i].toString()).append( '\n' );	        }		        // Get each of the tables	        for (var i:int= 0; i < numTables; i++) {	            sb.append( '\t' ).append(formats[i].toString()).append( '\n' );	        }	        return sb.toString();	    }				*/