/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>   ported to javascript <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>   */CmapFormat4 = Class.extend({    format:0,    length:0,    version:0,    language:0,    segCountX2:0,    searchRange:0,    entrySelector:0,    rangeShift:0,    endCode:null,    startCode:null,    idDelta:null,    idRangeOffset:null,    glyphIdArray:null,    segCount:0,	first:0,	last:0,		init: function( byte_ar ){    this.length = byte_ar.readUnsignedShort();    this.version = byte_ar.readUnsignedShort();        this.format = 4;    this.segCountX2 = byte_ar.readUnsignedShort();    this.segCount = this.segCountX2 / 2;    this.endCode = [];    this.startCode = [];    this.idDelta = [];    this.idRangeOffset = [];    this.searchRange = byte_ar.readUnsignedShort();    this.entrySelector = byte_ar.readUnsignedShort();    this.rangeShift = byte_ar.readUnsignedShort();        this.last = -1;    for (var i=0; i < this.segCount; i++) {        this.endCode.push( byte_ar.readUnsignedShort() );        if (this.endCode[i] > this.last) this.last = this.endCode[i];    }        byte_ar.readUnsignedShort(); // reservePad        for (var j=0; j < this.segCount; j++) {        this.startCode.push( byte_ar.readUnsignedShort() );        if ((j==0) || (this.startCode[j] < this.first)) this.first = this.startCode[j];    }        for (var k=0; k < this.segCount; k++) {        this.idDelta.push( byte_ar.readUnsignedShort() );    }        for (var l=0; l < this.segCount; l++) {        this.idRangeOffset.push( byte_ar.readUnsignedShort() );    }    // Whatever remains of this header belongs in glyphIdArray    var count = (this.length - 16- (this.segCount*8)) / 2;    this.glyphIdArray = [];    for (var m=0; m < count; m++) {        this.glyphIdArray.push( byte_ar.readUnsignedShort() );    }}, getFirst: function(){ return this.first; }, getLast: function(){ return this.last; }, mapCharCode: function(charCode){      // TODO - whats javascript equiv of try catch?      //try {        /*          Quoting :          http://developer.apple.com/fonts/TTRefMan/RM06/Chap6cmap.html#Surrogates          The original architecture of the Unicode Standard          allowed for all encoded characters to be represented          using sixteen bit code points. This allowed for up to          65,354 characters to be encoded. (Unicode code points          U+FFFE and U+FFFF are reserved and unavailable to          represent characters. For more details, see The Unicode          Standard.)          My comment : Isn't there a typo here ? Shouldn't we          rather read 65,534 ?          */        if ((charCode < 0) || (charCode >= 0xFFFE)) return 0;        for (var i=0; i < this.segCount; i++) {            if (this.endCode[i] >= charCode) {                if (this.startCode[i] <= charCode) {                    if (this.idRangeOffset[i] > 0) {                        return this.glyphIdArray[this.idRangeOffset[i]/2+                                            (charCode - this.startCode[i]) -                                            (this.segCount - i)];                    } else {                        return (this.idDelta[i] + charCode) % 65536;                    }                } else {                    break;                }            }        }  //  } catch (e:ArrayIndexOutOfBoundsException) { // TODO**    //    System.err.println("error: Array out of bounds - " + e.getMessage());    //}    return 0;}, toString: function(){        var str = "format: " + format + ", length: " + length + ", version: " + version;    str += ", segCOuntX2: " + segCountX2 + ", searchRange: " + searchRange + ", entrySelector: " + entrySelector;    str += ", rangeShift: " + rangeShift + ", endCode: " + endCode + ", startCode: " + startCode + ", idDelta: " + idDelta;    str += ", idRangeOffset: " + idRangeOffset;    return str;}});