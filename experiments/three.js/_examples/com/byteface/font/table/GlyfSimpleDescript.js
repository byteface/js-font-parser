/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>   ported to javascript <a href="mailto:byteface@googlemail.com">Michael Lawrence</a>*/GlyfSimpleDescript = Class.extend({        instructions:null,            onCurve:0x01,    xShortVector:0x02,    yShortVector:0x04,    repeat:0x08,    xDual:0x10,    yDual:0x20,	parentTable:null,	numberOfContours:0,	xMin:0,	yMin:0,	xMax:0,	yMax:0,    endPtsOfContours:null,    flags:null,    xCoordinates:null,    yCoordinates:null,    count:0,init: function( parentTable, numberOfContours, bais ){    this.parentTable = parentTable;	this.numberOfContours = numberOfContours;//	window.console.log(	this.numberOfContours );    	this.xMin = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );	this.yMin = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );	this.xMax = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );	this.yMax = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );        // Simple glyph description    this.endPtsOfContours = [];    for (var i=0; i < this.numberOfContours; i++) {        this.endPtsOfContours.push( ((bais.readUnsignedByte()<<8 | bais.readUnsignedByte())) );    }    // The last end point index reveals the total number of points    this.count = this.endPtsOfContours[numberOfContours-1] + 1;        this.flags = [];    this.xCoordinates = [];    this.yCoordinates = [];    var instructionCount = ((bais.readUnsignedByte()<<8 | bais.readUnsignedByte()));    this.readInstructions( bais, instructionCount );    //    window.console.log( bais.pos );        this.readFlags(this.count, bais);    this.readCoords(this.count, bais);}		, readInstructions: function( byte_ar, count ){    this.instructions = [];    for(var i=0; i < count; i++){        this.instructions.push( byte_ar.readUnsignedByte() );    }}, getEndPtOfContours: function(i){    return this.endPtsOfContours[i];}, getFlags: function(i){    return this.flags[i];}, getXCoordinate: function(i){    return this.xCoordinates[i];}, getYCoordinate: function(i){    return this.yCoordinates[i];}, isComposite: function(){    return false;}, getPointCount: function(){    return this.count;}, getContourCount: function(){    return this.getNumberOfContours();}/** * The table is stored as relative values, but we'll store them as absolutes */, readCoords: function( count, bais ){        var x = 0;    var y = 0;                    for(var i=0; i < count; i++){                if ((this.flags[i] & this.xDual) != 0) {            if((this.flags[i] & this.xShortVector) != 0){                x += bais.readUnsignedByte();            }        } else {            if((this.flags[i] & this.xShortVector) != 0){                x += ( -bais.readUnsignedByte() );            } else {                var xPos = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );                                if(xPos>60000)                {                    xPos = 65536 - xPos;                    x -= xPos;                }                else                {                    x += xPos;                }            }        }        this.xCoordinates.push(x);				    }// YEAH!!!! were getting fonts x and y points for drawing//window.console.log("ITS A NEW ONE:"+i);//window.console.log(this.xCoordinates);    for (var j=0; j < count; j++)    {        if((this.flags[j] & this.yDual) != 0)        {            if ((this.flags[j] & this.yShortVector) != 0)            {                y += ( bais.readUnsignedByte() );            }        } else {            if ((this.flags[j] & this.yShortVector) != 0)            {                y += ( -bais.readUnsignedByte() );                            } else {                                var yPos = ( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );                                if(yPos>60000)                {                    yPos = 65536 - yPos;                    y -= yPos;                                    }                else                {                    y += yPos;                }                        }        }        this.yCoordinates.push(y);    }}/** * The flags are run-length encoded */, readFlags: function(flagCount, bais){//    window.console.log( flagCount );        //window.console.log( bais.pos );    for(var index=0; index < flagCount; index++)    {        this.flags.push( bais.readUnsignedByte() );        if((this.flags[index] & this.repeat) != 0){            var repeats = bais.readUnsignedByte();            for (var i=1; i <= repeats; i++){                //trace("repeat");                this.flags[index + i] = this.flags[index];            }            index += repeats;        }    }      //  window.console.log(this.flags);    }, resolve: function(){}});