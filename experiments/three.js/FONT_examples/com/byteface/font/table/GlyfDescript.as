/*   Licensed to the Apache Software Foundation (ASF) under one or more   contributor license agreements.  See the NOTICE file distributed with   this work for additional information regarding copyright ownership.   The ASF licenses this file to You under the Apache License, Version 2.0   (the "License"); you may not use this file except in compliance with   the License.  You may obtain a copy of the License at       http://www.apache.org/licenses/LICENSE-2.0   Unless required by applicable law or agreed to in writing, software   distributed under the License is distributed on an "AS IS" BASIS,   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   See the License for the specific language governing permissions and   limitations under the License.   author java <a href="mailto:david@steadystate.co.uk">David Schweinsberg</a>   ported to as3 <a href="mailto:byteface@googlemail.com">Michael Lawrence</a */package org.libspark.font.table {	import flash.utils.ByteArray;		public class GlyfDescript extends Program implements IGlyphDescription	{			// flags		public static var onCurve:int= 0x01;		public static var xShortVector:int= 0x02;		public static var yShortVector:int= 0x04;		public static var repeat:int= 0x08;		public static var xDual:int= 0x10;		public static var yDual:int= 0x20;			protected var parentTable:GlyfTable;		private var numberOfContours:int;		private var xMin:Number;		private var yMin:Number;		private var xMax:Number;		private var yMax:Number;			public function GlyfDescript(parentTable:GlyfTable, numberOfContours:Number, bais:ByteArray )		{			this.parentTable = parentTable;			this.numberOfContours = numberOfContours;			xMin = uint( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );			yMin = uint( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );			xMax = uint( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );			yMax = uint( (bais.readUnsignedByte()<<8) | (bais.readUnsignedByte()) );		}			public function resolve():void{		}			public function getNumberOfContours():int{			return numberOfContours;		}			public function getXMaximum():Number{			return xMax;		}			public function getXMinimum():Number{			return xMin;		}			public function getYMaximum():Number{			return yMax;		}			public function getYMinimum():Number{			return yMin;		}						public function getFlags(i:int):uint{return new uint()}		public function getContourCount():int{return new int()}		public function getPointCount():int{return new int()}		public function getEndPtOfContours(i:int):int{return new int()}		public function getXCoordinate(i:int):Number{return new Number()}		public function getYCoordinate(i:int):Number{return new Number()}		public function isComposite():Boolean{return new Boolean()}			}}